{"version":3,"sources":["GameTitle.js","GameMessage.js","GameInterface.js","GameCell.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["GameTitle","id","GameMessage","props","msg","GameInterface","getContent","status","onClick","this","resetGame","React","Component","GameCell","handleClick","state","disable","player","currentPlayer","setState","content","handleSelect","coords","prevProps","className","Game","getInitialState","x","y","updatedBooard","board","updatedCellCount","availableCell","winner","hasWinner","nextPlayer","message","check","curr","every","map","row","i","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6733009.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function GameTitle(){\n    return(\n        <header id=\"game-title\" >\n            <h1>Tic Tac Toe</h1>\n        </header>\n    );\n}\n\n\n\n","import React from \"react\";\n\nexport default function GameMessage(props){\n    return(\n        <div id=\"game-message\">\n            {props.msg}\n        </div>\n    );\n}\n","import React from \"react\";\n\n\nclass GameInterface extends React.Component{\n    getContent = (status) => {\n        return status === 'not_started' ? 'Play!' : 'Restart';\n    }\n\n    render() {\n        return(\n            <div id=\"game-interface\">\n                <button\n                    onClick={this.props.resetGame}\n                >{this.getContent(this.props.status)}</button>\n            </div>\n        );\n    }\n}\n\nexport default GameInterface;\n","import React from \"react\";\n\nclass GameCell extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            disable: false,//able to move\n            content: '?'\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        // set restart, Typical usage (don't forget to compare props):\n        if (prevProps.status !== 'not_started' && this.props.status === \"not_started\") {\n            this.setState({\n                disable: false,\n                content: '?'\n            });\n        }\n    }\n\n    //handleClick = function(){},can be clicked\n    handleClick = () => {\n        //if board can move, game is not end, the cell can be clicked\n        if (!this.state.disable && this.props.status !== 'end') {\n            //find current player\n            let player = this.props.currentPlayer;\n            //To update the value in the state\n            this.setState({\n                disable: true,\n                content: player\n            });\n            this.props.handleSelect(this.props.coords, player);\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"game-cell\"\n                 onClick={this.handleClick}>\n                //onClick detects if the div tag has been clicked, and when it’s clicked,\n                //it will run the function “handleClick”\n                {this.state.content}\n            </div>\n        );\n    }\n}\n\nexport default GameCell;","import React from 'react';\nimport GameTitle from \"./GameTitle\";\nimport GameMessage from \"./GameMessage\";\nimport GameInterface from \"./GameInterface\";\nimport GameCell from \"./GameCell\";\n\nclass Game extends React.Component {\n    //constructor-initializes new object\n    constructor(props) {\n        //super\n        super(props);\n        //Initialize React component state\n        //this.state=(board:[],player:o,gameState:GAME_STATE_MOVE,move:0); colon seems like equal sign.\n        this.state = this.getInitialState();\n    }\n\n    resetGame = () => {\n        this.setState(this.getInitialState());\n    }\n\n    handleSelect = (coords, player) => {\n        let x = coords[0],\n            y = coords[1],\n            updatedBooard = this.state.board,\n            updatedCellCount = this.state.availableCell - 1;\n        updatedBooard[x][y] = player;\n        this.setState({\n            status: 'in_progress',\n            board: updatedBooard,\n            availableCell: updatedCellCount\n        });\n        // update winner\n        let winner = this.hasWinner(x, y, player) ? player : null;\n        if (winner) {\n            this.setState({\n                status: 'end',\n                winner: winner\n            });\n        } else if (updatedCellCount === 0) {\n            this.setState({\n                status: 'end',\n                winner: null\n            });\n        } else {\n            this.setState({\n                currentPlayer: this.nextPlayer()\n            });\n        }\n    }\n\n    nextPlayer = () => {\n        return this.state.currentPlayer === 'X' ? 'O' : 'X';\n        // if (this.state.currentPlayer === 'X') {\n        //     return 'O';\n        // } else {\n        //     return 'X';\n        // }\n    }\n\n    message = () => {\n        if (this.state.status === 'end') {\n            let msg = this.state.winner ? this.state.winner + ' won!' : 'Tie';\n            return msg;\n        } else {\n            return this.state.currentPlayer + \"'s turn\";\n        }\n    }\n\n    hasWinner = (x, y, player) => {\n        let board = this.state.board,\n            check = (curr) => curr === player;\n        // row\n        if (board[x].every(check)) return true;\n        // col\n        if (board.map(row => row[y]).every(check)) return true;\n        // diag\n        if (x === y && [0,1,2].map(i => board[i][i]).every(check)) return true;\n        // anti-diag\n        if (x + y === 2 && [0,1,2].map(i => board[i][2-i]).every(check)) return true;\n        return false;\n    }\n\n    getInitialState = () => {\n        return {\n            currentPlayer: 'X',\n            status: 'not_started',\n            board: [\n                ['', '', ''],\n                ['', '', ''],\n                ['', '', '']\n            ],\n            availableCell: 9,\n            winner: null\n        };\n    }\n\n    render() {\n        return (\n            <div id=\"game\">\n                <GameTitle/>\n                <div className=\"game-board\">\n                    <div className=\"row\">\n                        <GameCell currentPlayer={this.state.currentPlayer} handleSelect={this.handleSelect} status={this.state.status} coords={[0,0]} />\n                        <GameCell currentPlayer={this.state.currentPlayer} handleSelect={this.handleSelect} status={this.state.status} coords={[0,1]} />\n                        <GameCell currentPlayer={this.state.currentPlayer} handleSelect={this.handleSelect} status={this.state.status} coords={[0,2]} />\n                    </div>\n                    <div className=\"row\">\n                        <GameCell currentPlayer={this.state.currentPlayer} handleSelect={this.handleSelect} status={this.state.status} coords={[1,0]} />\n                        <GameCell currentPlayer={this.state.currentPlayer} handleSelect={this.handleSelect} status={this.state.status} coords={[1,1]} />\n                        <GameCell currentPlayer={this.state.currentPlayer} handleSelect={this.handleSelect} status={this.state.status} coords={[1,2]} />\n                    </div>\n                    <div className=\"row\">\n                        <GameCell currentPlayer={this.state.currentPlayer} handleSelect={this.handleSelect} status={this.state.status} coords={[2,0]} />\n                        <GameCell currentPlayer={this.state.currentPlayer} handleSelect={this.handleSelect} status={this.state.status} coords={[2,1]} />\n                        <GameCell currentPlayer={this.state.currentPlayer} handleSelect={this.handleSelect} status={this.state.status} coords={[2,2]} />\n                    </div>\n                </div>\n                \n                <GameMessage msg={this.message()} />\n                \n                <GameInterface resetGame={this.resetGame} status={this.state.status} />\n            \n            </div>\n        );\n    }\n}\n    \nexport default Game;\n","import React from 'react';\nimport Game from './Game';\nimport './App.css';\n\n//App-Top level component implemented as React function component.\n\nfunction App() {\n    //This is called a function component, it only returns a block of html,\n    // so try replacing /*HTML STUFF*/ with <h1>Hello World<h1/>, and it should show up on your browser, nice.\n    //renders this component\n  return (\n    <div className=\"App\">\n        //you want App.js to run Game.js, so to run a component\n        // So in order to have your App.js to run Game.js, you do\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n//also can add it before function.\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}